name: Publishing Release
on:
  schedule:
    - cron: '0 20 * * *'  # GMT 20 == GMT+8 04
  workflow_dispatch:
    # Manually trigger the release workflow, a version must be provided
    inputs:
      version:
        description: 'The version to release (e.g. v0.8.0), or leave it empty for nightly build'
        type: string
        required: false

env:
  PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
  NIGHT_PWD: ${{ secrets.TAICHI_PYPI_PWD }}
  NIGHT_USERNAME: ${{ secrets.TAICHI_PYPI_USERNAME }}
  METADATA_USERNAME: ${{ secrets.METADATA_USERNAME }}
  METADATA_PASSWORD: ${{ secrets.METADATA_PASSWORD }}
  METADATA_URL: ${{ secrets.METADATA_URL }}
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  TI_CI: 1

jobs:
  add_version_to_database:
    name: Add version to database
    # Skip running release workflow on forks
    if: github.repository_owner == 'taichi-dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Save new version
        run: |
          if [ -z "$RELEASE_VERSION" ]; then
            echo "Not a production release"
            exit 0
          fi
          python3 -m pip install requests==2.26
          python3 misc/save_new_version.py

  build_and_test_windows:
    name: Build and Upload (Windows only)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: [self-hosted, windows, cuda, OpenGL]
    steps:
      - name: Workaround checkout Needed single revision issue
        run: |
          git config --system core.longpaths true
          git submodule foreach 'git rev-parse HEAD > /dev/null 2>&1 || rm -rf $PWD'

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Build
        shell: cmd
        run: |
          python .\.github\workflows\scripts\build.py
        env:
          PY: ${{ matrix.python }}
          PROJECT_NAME: ${{ matrix.name }}
          TAICHI_CMAKE_ARGS: >-
            -DTI_WITH_OPENGL:BOOL=ON
            -DTI_WITH_VULKAN:BOOL=ON
            -DTI_WITH_DX11:BOOL=ON
            -DTI_WITH_DX12:BOOL=ON
            -DTI_WITH_CC:BOOL=OFF
            -DTI_BUILD_TESTS:BOOL=ON
            -DTI_WITH_C_API=ON

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*.whl
          retention-days: 20

      - name: Test
        shell: pwsh
        run: |
          .\.github\workflows\scripts\win_test.ps1 -libsDir "$env:LocalAppData/buildbot"
        env:
          PY: ${{ matrix.python }}
          TI_WANTED_ARCHS: "cpu,cuda,opengl,vulkan"
          TI_SKIP_VERSION_CHECK: ON
